package org.firstinspires.ftc.teamcode._TeleOPs;

import static com.sun.tools.javac.jvm.ByteCodes.error;


import com.acmerobotics.dashboard.FtcDashboard;
import com.acmerobotics.dashboard.telemetry.MultipleTelemetry;
import com.qualcomm.robotcore.eventloop.opmode.Autonomous;
import com.qualcomm.robotcore.eventloop.opmode.Disabled;
import com.qualcomm.robotcore.eventloop.opmode.LinearOpMode;
import com.qualcomm.robotcore.eventloop.opmode.TeleOp;
import com.qualcomm.robotcore.hardware.CRServo;
import com.qualcomm.robotcore.hardware.DcMotor;
import com.qualcomm.robotcore.hardware.DcMotorEx;
import com.qualcomm.robotcore.hardware.DcMotorSimple;
import com.qualcomm.robotcore.hardware.HardwareMap;
import com.acmerobotics.dashboard.config.Config;
import com.qualcomm.robotcore.hardware.Servo;
//import com.arcrobotics.ftclib.controller.PIDController;



import com.qualcomm.robotcore.util.ElapsedTime;

import org.opencv.core.Mat;


@TeleOp
public class
AngelBotsMec extends LinearOpMode {




    private final double ticks_in_deg = 700 / 180;
    //Motors
    private DcMotor fr;
    private DcMotor fl;
    private DcMotor br;
    private DcMotor bl;
    private DcMotor Arm1;
    private DcMotor Arm2;
//    private DcMotor Pivot;
    private Servo wrist;
    private CRServo intake;
    private DcMotor armMotor;



    public void runOpMode() throws InterruptedException {


        //Motors
        DcMotor fr = hardwareMap.dcMotor.get("fr");
        DcMotor fl = hardwareMap.dcMotor.get("fl");
        DcMotor br = hardwareMap.dcMotor.get("br");
        DcMotor bl = hardwareMap.dcMotor.get("bl");
        DcMotor armMotor = hardwareMap.dcMotor.get("armMotor");
//        DcMotor Arm2 = hardwareMap.dcMotor.get("Arm2");
//        DcMotor Pivot = hardwareMap.dcMotor.get("Pivot");


        CRServo intake = hardwareMap.crservo.get("intake");
        Servo wrist = hardwareMap.servo.get("wrist");

        fl.setZeroPowerBehavior(DcMotor.ZeroPowerBehavior.BRAKE);
        bl.setZeroPowerBehavior(DcMotor.ZeroPowerBehavior.BRAKE);
        fr.setZeroPowerBehavior(DcMotor.ZeroPowerBehavior.BRAKE);
        br.setZeroPowerBehavior(DcMotor.ZeroPowerBehavior.BRAKE);

        br.setMode(DcMotor.RunMode.RUN_USING_ENCODER);
        fr.setMode(DcMotor.RunMode.RUN_USING_ENCODER);
        bl.setMode(DcMotor.RunMode.RUN_USING_ENCODER);
        fl.setMode(DcMotor.RunMode.RUN_USING_ENCODER);
        fr.setDirection(DcMotorSimple.Direction.REVERSE);
        br.setDirection(DcMotorSimple.Direction.REVERSE);



        waitForStart();
        while (opModeIsActive()) {

            double y = -gamepad1.left_stick_y; // Remember, this is reversed
            double x = gamepad1.left_stick_x; // Counteract imperfect strafing
            double rx = .8 * (gamepad1.right_stick_x);


            double i = 0;
            double denominator = Math.max(Math.abs(y) + Math.abs(x) + Math.abs(rx), 1);
            double frontLeftPower = (y + x + rx) / denominator;
            double backLeftPower = (y - x + rx) / denominator;
            double frontRightPower = (y - x - rx) / denominator;
            double backRightPower = (y + x - rx) / denominator;

            fl.setPower(frontLeftPower * -.75);
            bl.setPower(backLeftPower * -.75);
            fr.setPower(frontRightPower * -.75);
            br.setPower(backRightPower * -.75);


            if (gamepad2.left_stick_y > 0.2) {
                armMotor.setPower(-.5);

            } else if (gamepad2.left_stick_y < -0.2) {
                armMotor.setPower(.5);

            } else {
                armMotor.setPower(0);
            }

            if (gamepad2.left_bumper) {
                intake.setPower(-.5);
            } else if (gamepad2.right_bumper) {
                intake.setPower(.5);
            } else {
                intake.setPower(0);
            }


            if (gamepad2.cross) {
                wrist.setPosition(.25);

            } else if (gamepad2.triangle) {
                wrist.setPosition(0);
            }

        }


    }
}

