package org.firstinspires.ftc.teamcode._TeleOPs;

import static com.sun.tools.javac.jvm.ByteCodes.error;


import com.acmerobotics.dashboard.FtcDashboard;
import com.acmerobotics.dashboard.telemetry.MultipleTelemetry;
import com.qualcomm.robotcore.eventloop.opmode.Autonomous;
import com.qualcomm.robotcore.eventloop.opmode.LinearOpMode;
import com.qualcomm.robotcore.eventloop.opmode.TeleOp;
import com.qualcomm.robotcore.hardware.CRServo;
import com.qualcomm.robotcore.hardware.DcMotor;
import com.qualcomm.robotcore.hardware.DcMotorEx;
import com.qualcomm.robotcore.hardware.DcMotorSimple;
import com.qualcomm.robotcore.hardware.HardwareMap;
import com.acmerobotics.dashboard.config.Config;
import com.qualcomm.robotcore.hardware.Servo;
import com.arcrobotics.ftclib.controller.PIDController;



import com.qualcomm.robotcore.util.ElapsedTime;

import org.opencv.core.Mat;


@TeleOp
public class
Awesomegm3 extends LinearOpMode {


    private PIDController controller;
    //All the slide/Arm variables have an A at the beginning
    public static double Ap = 0.02, Ai = 0, Ad = 0;
    public static double Af = 0.05;
    public static int Atarget = 0;
    private final double ticks_in_deg = 700 / 180;
    //Motors
    private DcMotor FRW;
    private DcMotor FLW;
    private DcMotor BRW;
    private DcMotor BLW;
    private DcMotor Arm1;
    private DcMotor Arm2;
    private DcMotor Pivot;
    private CRServo left;
    private CRServo right;
    private boolean PidOn;



    public void runOpMode() throws InterruptedException {


        PidOn = true;
        controller = new PIDController(Ap,Ai,Ad);
        telemetry = new MultipleTelemetry(telemetry, FtcDashboard.getInstance().getTelemetry());


        //Motors
        DcMotor FRW = hardwareMap.dcMotor.get("FRW");
        DcMotor FLW = hardwareMap.dcMotor.get("FLW");
        DcMotor BRW = hardwareMap.dcMotor.get("BRW");
        DcMotor BLW = hardwareMap.dcMotor.get("BLW");
        DcMotor Arm1 = hardwareMap.dcMotor.get("Arm1");
        DcMotor Arm2 = hardwareMap.dcMotor.get("Arm2");
        DcMotor Pivot = hardwareMap.dcMotor.get("Pivot");


        CRServo left = hardwareMap.crservo.get("left");
        CRServo right = hardwareMap.crservo.get("right");

        FLW.setZeroPowerBehavior(DcMotor.ZeroPowerBehavior.BRAKE);
        BLW.setZeroPowerBehavior(DcMotor.ZeroPowerBehavior.BRAKE);
        FRW.setZeroPowerBehavior(DcMotor.ZeroPowerBehavior.BRAKE);
        BRW.setZeroPowerBehavior(DcMotor.ZeroPowerBehavior.BRAKE);

        BRW.setMode(DcMotor.RunMode.RUN_USING_ENCODER);
        FRW.setMode(DcMotor.RunMode.RUN_USING_ENCODER);
        BLW.setMode(DcMotor.RunMode.RUN_USING_ENCODER);
        FLW.setMode(DcMotor.RunMode.RUN_USING_ENCODER);
        FRW.setDirection(DcMotorSimple.Direction.REVERSE);
        BRW.setDirection(DcMotorSimple.Direction.REVERSE);



        waitForStart();
        while (opModeIsActive()) {

            double y = -gamepad1.left_stick_y; // Remember, this is reversed
            double x = gamepad1.left_stick_x; // Counteract imperfect strafing
            double rx = .8 * (gamepad1.right_stick_x);
            telemetry.addData("Pid Value:", PidOn);


            double i = 0;
            double denominator = Math.max(Math.abs(y) + Math.abs(x) + Math.abs(rx), 1);
            double frontLeftPower = (y + x + rx) / denominator;
            double backLeftPower = (y - x + rx) / denominator;
            double frontRightPower = (y - x - rx) / denominator;
            double backRightPower = (y + x - rx) / denominator;

            FLW.setPower(frontLeftPower * -1);
            BLW.setPower(backLeftPower * -1);
            FRW.setPower(frontRightPower * -1);
            BRW.setPower(backRightPower * -1);


            //PidOn is a bool
            if (PidOn){

                controller.setPID(Ap,Ai,Ad);
                int armPos = Arm1.getCurrentPosition();
                double pid = controller.calculate(armPos, Atarget);
                double ff = Math.cos(Math.toRadians(Atarget/ ticks_in_deg)) * Af;
                double power = pid + ff;
                //Finishes the math by setting the power to the pid + ff
                Arm1.setPower(power);
                Arm2.setPower(-power);
                telemetry.addData("pos", armPos);
                telemetry.addData("target", Atarget);
                telemetry.update();
                if(gamepad2.dpad_down){
                    Atarget = 0;
                } else if (gamepad2.dpad_right){
                    Atarget = 1300;
                } else if (gamepad2.dpad_up){
                    Atarget = 2600;
                }


            }
            //Slide Control Independant from bool
            if (gamepad2.touchpad){
                PidOn = true;
            }


            //Pivot
            if (gamepad2.left_bumper){
                Pivot.setPower(.5);
            } else if (gamepad2.right_bumper) {
                Pivot.setPower(-.5);
            } else {
                Pivot.setPower(0);
            }


            if (gamepad1.square) {
                left.setPower(1);
                right.setPower(-1);
            } else if (gamepad1.circle) {
                left.setPower(-1);
                right.setPower(1);
            } else {
                left.setPower(0);
                right.setPower(0);
            }

            if (gamepad2.left_stick_y > 50)  {
                Arm1.setPower(.4);
                Arm2.setPower(-.4);
            } else if (gamepad2.left_stick_y < -50) {
                Arm1.setPower(-.4);
                Arm2.setPower(.4);

            } else {
                Arm1.setPower(0);
                Arm2.setPower(0);
            }

            if (gamepad2.right_stick_y > 50)  {
                Arm1.setPower(.4);
                Arm2.setPower(-.4);
            } else if (gamepad2.right_stick_y < -50) {
                Arm1.setPower(-.4);
                Arm2.setPower(.4);

            } else {
                Arm1.setPower(0);
                Arm2.setPower(0);
            }



        }

        class extend {





        }

    }
}

